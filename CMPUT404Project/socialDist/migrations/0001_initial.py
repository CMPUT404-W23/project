# Generated by Django 4.1.7 on 2023-02-21 20:39

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Author",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("github", models.TextField()),
                ("profileImg", models.TextField()),
                ("isServerAdmin", models.BooleanField(default=False)),
                ("isAuthenticated", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "commentID",
                    models.CharField(max_length=40, primary_key=True, serialize=False),
                ),
                ("content", models.TextField()),
                ("contentType", models.TextField()),
                ("date", models.DateField()),
                ("isLiked", models.BooleanField(default=False)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="socialDist.author",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Server",
            fields=[
                ("serverID", models.Field(primary_key=True, serialize=False)),
                ("serverName", models.CharField(max_length=50)),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="socialDist.author",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                (
                    "postID",
                    models.CharField(max_length=40, primary_key=True, serialize=False),
                ),
                ("title", models.CharField(max_length=50)),
                ("content", models.BinaryField()),
                ("contentType", models.TextField()),
                ("date", models.DateField()),
                ("visibility", models.CharField(max_length=30)),
                ("unlisted", models.BooleanField()),
                ("isLiked", models.BooleanField(default=False)),
                (
                    "posterID",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="socialDist.author",
                    ),
                ),
                (
                    "server",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="socialDist.server",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Like",
            fields=[
                (
                    "likeID",
                    models.CharField(max_length=40, primary_key=True, serialize=False),
                ),
                ("likeType", models.CharField(max_length=20)),
                (
                    "parentComment",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="socialDist.comment",
                    ),
                ),
                (
                    "parentPost",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="socialDist.post",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Inbox",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField()),
                ("contentType", models.TextField()),
                ("comment", models.ManyToManyField(to="socialDist.comment")),
                ("like", models.ManyToManyField(to="socialDist.like")),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="socialDist.author",
                    ),
                ),
                ("post", models.ManyToManyField(to="socialDist.post")),
            ],
        ),
        migrations.AddField(
            model_name="comment",
            name="parentPostID",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="socialDist.post"
            ),
        ),
        migrations.AddField(
            model_name="author",
            name="inServer",
            field=models.ForeignKey(
                blank="True",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="socialDist.server",
            ),
        ),
        migrations.AddField(
            model_name="author",
            name="isFriendWith",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="socialDist.author",
            ),
        ),
        migrations.AddField(
            model_name="author",
            name="user",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
    ]
