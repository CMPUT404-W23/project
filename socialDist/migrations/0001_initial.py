# Generated by Django 4.1.7 on 2023-03-31 02:32

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import socialDist.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User2',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.CharField(default=socialDist.models.User2.uuidGenerator, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.CharField(max_length=200, primary_key=True, serialize=False)),
                ('host', models.CharField(max_length=200)),
                ('displayName', models.CharField(default='', max_length=40)),
                ('github', models.URLField(blank=True, null=True)),
                ('profileImage', models.URLField(blank=True, null=True)),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('published', models.DateTimeField(auto_created=True)),
                ('id', models.CharField(max_length=200, primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('contentType', models.TextField(choices=[('text/plain', 'plaintext'), ('text/markdown', 'markdown')])),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='socialDist.author')),
            ],
        ),
        migrations.CreateModel(
            name='Connection',
            fields=[
                ('apiAddress', models.URLField(primary_key=True, serialize=False)),
                ('apiCreds', models.TextField(blank=True)),
                ('hostName', models.URLField()),
            ],
        ),
        migrations.CreateModel(
            name='FollowRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_created=True)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='send_requests', to='socialDist.author')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recievced_requests', to='socialDist.author')),
            ],
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('serverAddress', models.URLField(primary_key=True, serialize=False)),
                ('serverKey', models.TextField(blank=True)),
                ('isLocalServer', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('published', models.DateTimeField(auto_created=True)),
                ('id', models.CharField(max_length=200, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=50)),
                ('source', models.CharField(max_length=50)),
                ('origin', models.CharField(max_length=50)),
                ('description', models.TextField()),
                ('contentType', models.TextField(choices=[('text/plain', 'plaintext'), ('text/markdown', 'markdown'), ('application/base64', 'binary'), ('image/png;base64', 'PNG image'), ('image/jpeg;base64', 'JPEG image'), ('image/jpg;base64', 'JPG image')])),
                ('content', models.TextField()),
                ('categories', models.CharField(max_length=100)),
                ('visibility', models.CharField(choices=[('VISIBLE', 'Public'), ('FRIENDS', 'Private')], max_length=30)),
                ('unlisted', models.BooleanField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='socialDist.author')),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('published', models.DateTimeField(auto_created=True)),
                ('id', models.CharField(max_length=200, primary_key=True, serialize=False)),
                ('likeType', models.CharField(max_length=20)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='liked', to='socialDist.author')),
                ('parentComment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='socialDist.comment')),
                ('parentPost', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='socialDist.post')),
            ],
        ),
        migrations.CreateModel(
            name='Inbox',
            fields=[
                ('inboxID', models.CharField(default='', max_length=200, primary_key=True, serialize=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='socialDist.author')),
                ('comments', models.ManyToManyField(blank=True, to='socialDist.comment')),
                ('likes', models.ManyToManyField(blank=True, to='socialDist.like')),
                ('posts', models.ManyToManyField(blank=True, to='socialDist.post')),
                ('requests', models.ManyToManyField(blank=True, to='socialDist.followrequest')),
            ],
        ),
        migrations.AddField(
            model_name='comment',
            name='parentPost',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='socialDist.post'),
        ),
        migrations.CreateModel(
            name='UserFollowing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('following_user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to='socialDist.author')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to='socialDist.author')),
            ],
            options={
                'unique_together': {('user_id', 'following_user_id')},
            },
        ),
    ]
